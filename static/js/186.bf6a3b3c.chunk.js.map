{"version":3,"file":"static/js/186.bf6a3b3c.chunk.js","mappings":"yRAiBA,EAfoB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACrB,OACEA,EAAQC,OAAS,IACf,wBACGD,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,2BACE,wBAAKF,KACL,uBAAIC,MAFGC,EADE,KASpB,EC4CD,EAnDgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBJ,GAAa,GAFS,UAGHK,EAAAA,EAAAA,IAAgBX,GAHb,OAGhBY,EAHgB,OAKtBR,EAAgBQ,EAAKC,SALC,gDAOtBL,EACEM,EAAAA,GAAAA,MAAY,0CAA2C,CACrDC,MAAO,aATW,yBAatBT,GAAa,GAbS,4EAAH,qDAgBvBI,GACD,GAAE,CAACV,KAGF,gCACGK,IACC,SAAC,KAAD,CACEW,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,OAAO,OACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGZhB,IAAS,SAAC,KAAD,IACTJ,EAAaR,OAAS,GACrB,SAAC,EAAD,CAAaD,QAASS,KAEtB,uBAAG,+CAIV,C","sources":["components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React from 'react';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    reviews.length > 0 && (\n      <ul>\n        {reviews.map(({ author, content, id }) => (\n          <li key={id}>\n            <h2>{author}</h2>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\n\nexport default ReviewsList;\n","import React, { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'components/Services/api';\nimport { useParams } from 'react-router-dom';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Grid } from 'react-loader-spinner';\nimport ReviewsList from 'components/ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getMovieReviews(movieId);\n\n        setMovieReviews(data.results);\n      } catch (error) {\n        setError(\n          toast.error('Sorry, something went wrong. Try again!', {\n            theme: 'colored',\n          })\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <Grid\n          height=\"80\"\n          width=\"80\"\n          color=\"#4fa94d\"\n          ariaLabel=\"grid-loading\"\n          radius=\"12.5\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {error && <ToastContainer />}\n      {movieReviews.length > 0 ? (\n        <ReviewsList reviews={movieReviews} />\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["reviews","length","map","author","content","id","movieId","useParams","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","useEffect","fetchMovieReviews","getMovieReviews","data","results","toast","theme","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible"],"sourceRoot":""}